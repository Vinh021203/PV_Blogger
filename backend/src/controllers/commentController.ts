import { Request, Response } from "express";
import Comment from "../models/commentModel";
import Post from "../models/postModel";
import { AuthRequest } from "../middlewares/authMiddleware";

// üìå API l·∫•y danh s√°ch t·∫•t c·∫£ b√¨nh lu·∫≠n (C√¥ng khai)
export const getAllComments = async (_req: Request, res: Response): Promise<void> => {
  try {
    const comments = await Comment.find()
      .populate("userId", "username") // ‚úÖ L·∫•y username c·ªßa ng∆∞·ªùi b√¨nh lu·∫≠n
      .sort({ createdAt: -1 });

    res.status(200).json(comments);
  } catch (error: unknown) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch b√¨nh lu·∫≠n:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};


// üìå API th√™m b√¨nh lu·∫≠n v√†o b√†i vi·∫øt
export const createComment = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: "Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c!" });
      return;
    }

    const postExists = await Post.exists({ _id: req.params.postId });
    if (!postExists) {
      res.status(404).json({ error: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!" });
      return;
    }

    const newComment = new Comment({ ...req.body, userId: req.user.id, postId: req.params.postId });
    await newComment.save();

    res.status(201).json(newComment);
  } catch (error: unknown) {
    console.error("‚ùå L·ªói khi t·∫°o b√¨nh lu·∫≠n:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};

// üìå API l·∫•y b√¨nh lu·∫≠n theo b√†i vi·∫øt
export const getCommentsByPost = async (req: Request, res: Response): Promise<void> => {
  try {
    const comments = await Comment.find({ postId: req.params.postId })
      .populate("userId", "username") // ‚úÖ Th√™m username v√†o d·ªØ li·ªáu tr·∫£ v·ªÅ
      .sort({ createdAt: -1 });

    res.status(200).json(comments);
  } catch (error: unknown) {
    console.error("‚ùå L·ªói khi l·∫•y b√¨nh lu·∫≠n theo b√†i vi·∫øt:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};


// üìå API c·∫≠p nh·∫≠t b√¨nh lu·∫≠n
export const updateComment = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: "Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c!" });
      return;
    }

    const comment = await Comment.findById(req.params.commentId);
    if (!comment) {
      res.status(404).json({ error: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i!" });
      return;
    }

    if (comment.userId.toString() !== req.user.id) {
      res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√¨nh lu·∫≠n n√†y!" });
      return;
    }

    comment.content = req.body.content;
    await comment.save();

    res.status(200).json(comment);
  } catch (error: unknown) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√¨nh lu·∫≠n:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};

// üìå API x√≥a b√¨nh lu·∫≠n
export const deleteComment = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const comment = await Comment.findById(req.params.commentId);
    if (!comment) {
      res.status(404).json({ error: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i!" });
      return;
    }

    await Comment.findByIdAndDelete(req.params.commentId);
    res.status(200).json({ message: "X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng!" });
  } catch (error: unknown) {
    console.error("‚ùå L·ªói khi x√≥a b√¨nh lu·∫≠n:", error);
    res.status(500).json({ error: "L·ªói server!" });
  }
};
